<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>windowsfirewallcontrol</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>5.4.0.0</version>
    <packageSourceUrl>https://github.com/tkersten09/windowsfirewallcontrol.git</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>tkersten09</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>windowsfirewallcontrol (Install)</title>
    <authors>Alexandru Dicu</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>https://www.binisoft.org</projectUrl>
    <iconUrl>https://cdn.jsdelivr.net/gh/tkersten09/cdn/wfc.png</iconUrl>
    <!-- <copyright>Year Software Vendor</copyright> -->
    <!-- If there is a license Url available, it is required for the community feed -->
    <!-- <licenseUrl>Software License Location __REMOVE_OR_FILL_OUT__</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>-->
    <!--<projectSourceUrl>Software Source Location - is the software FOSS somewhere? Link to it with this</projectSourceUrl>-->
    <!--<docsUrl>At what url are the software docs located?</docsUrl>-->
    <!--<mailingListUrl></mailingListUrl>-->
    <!--<bugTrackerUrl></bugTrackerUrl>-->
    <tags>windowsfirewallcontrol Windows Firewall Control</tags>
    <summary>Windows Firewall Control is a powerful tool which extends the functionality of Windows Firewall and provides new extra features which makes Windows Firewall better. </summary>
    <description>
Windows Firewall Control runs in the system tray and allows the user to control the native firewall easily without having to waste time by navigating to the specific part of the firewall. This is the best tool to manage the native firewall from Windows 10, 8.1, 8, 7, Server 2016, Server 2012. 

Windows Firewall Control offers four filtering modes which can be switched with just a mouse click:

High Filtering - All outbound and inbound connections are blocked. This profile blocks all attempts to connect to and from your computer.
Medium Filtering - Outbound connections that do not match a rule are blocked. Only the programs that you allow can initiate outbound connections.
Low Filtering - Outbound connections that do not match a rule are allowed. The user can block the programs he doesn't want to allow initiating outbound connections.
No Filtering - Windows Firewall is turned off. Avoid using this setting unless you have another firewall running on your computer.

Windows Firewall Control doesn't do any packet filtering and does not block or allow any connection. This is done by Windows Firewall itself based on the existing firewall rules. 
Program Features

√ Notifications of outbound blocked connections.
√ Learning mode that automatically allows digitally signed programs.
√ Create temporary rules which are automatically deleted when they expire or on program restart.
√ Intuitive user interface which is easy accessible through a system tray icon.
√ Full support with standard user accounts. Elevated privileges are required only at installation.
√ Disable the ability of other programs to tamper Windows Firewall rules and state.
√ Integrated support of creating, modifying and deleting Window Firewall rules.
√ Multiple and easier ways of creating new rules in Windows Firewall.
√ Lock feature which can disable the access to the settings of the program and Windows Firewall.
√ Shell integration into the right click context menu of the executable files.
√ Automatically display invalid rules for programs that do not exist any more.
√ Possibility to find and display duplicate firewall rules.
√ Merge multiple similar rules or duplicate existing ones.
√ View recently allowed and blocked connections and create new rules from the Security log.
√ Import and export of partial sets of rules.
√ Protection to unauthorized uninstallation.
√ Possibility to restore previous settings at uninstallation.
√ Global hot keys are supported and various shortcut keys are available.
√ And many, many more. Just try it out. 
    </description>
    <releaseNotes>https://www.binisoft.org/changelog.txt</releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <dependencies>
      <dependency id="autohotkey" version="1.1" />
      <dependency id="chocolatey-core.extension" version="1.1.0" />
    </dependencies>
    <!-- chocolatey-core.extension - https://chocolatey.org/packages/chocolatey-core.extension
         - You want to use Get-UninstallRegistryKey on less than 0.9.10 (in chocolateyUninstall.ps1)
         - You want to use Get-PackageParameters and on less than 0.11.0
         - You want to take advantage of other functions in the core community maintainer's team extension package
    -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
